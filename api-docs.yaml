openapi: 3.0.1
info:
  version: 1.0.1
  title: Siemanejro Bets Api
  description: This is a Siemanejro Spring Boot RESTful service using OpenAPI 3
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Users
  description: the user API
- name: Matches
  description: the match API
- name: Bets
  description: the bet API
paths:
  /bets/{betId}:
    get:
      tags:
      - Bets
      summary: Find bet by ID
      description: Return a single bet
      operationId: getBet
      parameters:
      - name: betId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: securityWrapper
        in: query
        required: true
        schema: {}
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bet'
    put:
      tags:
      - Bets
      summary: Update an existing bet
      operationId: updateBet
      parameters:
      - name: betId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bet'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bet'
        404:
          description: Bet not found
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - Bets
      summary: Delete a bet
      operationId: deleteBet
      parameters:
      - name: betId
        in: path
        description: Id of the bet to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
  /bets:
    get:
      tags:
      - Bets
      summary: Get all user bets
      description: Get all logged user bets by default. Possibility to filter by matchId
      operationId: getAllBets
      parameters:
      - name: matchId
        in: query
        description: Filter bets by matchId. By default is null
        required: false
        schema:
          type: integer
          format: int64
      - name: securityWrapper
        in: query
        required: true
        schema: {}
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bet'
    post:
      tags:
      - Bets
      summary: Add new bet
      operationId: addBet
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                betList:
                  type: array
                  properties:
                    empty:
                      type: boolean
                  items:
                    $ref: '#/components/schemas/Bet'
                securityWrapper: {}
      responses:
        403:
          description: Forbidden operation (Someone else's bet was provided)
          content:
            '*/*':
              schema:
                type: object
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bet'
  /matches/{matchId}:
    get:
      tags:
      - Matches
      summary: Find matches by ID
      description: Return a single match
      operationId: getMatch
      parameters:
      - name: matchId
        in: path
        description: Id of the match to be find
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Match'
  /matches:
    get:
      tags:
      - Matches
      summary: Find matches in week range
      description: Get all matches from a week before to a week later. Possibility
        to filter by competitionIds
      operationId: getAllMatches
      parameters:
      - name: competitionIds
        in: query
        description: Filter bets by competitionIds. By default is null
        required: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Find user by ID
      description: Return a single user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: securityWrapper
        in: query
        required: true
        schema: {}
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
      - Users
      summary: Update an existing user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userToUpdate:
                  $ref: '#/components/schemas/User'
                securityWrapper: {}
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: object
        404:
          description: There is no user with provided id
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - Users
      summary: Delete a user
      description: Available only for admin
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        200:
          description: successful operation
  /users:
    get:
      tags:
      - Users
      summary: Get all users / get user by username
      description: All users available only for admin. Possibility to filter by username
        for everyone
      operationId: getAllUsers
      parameters:
      - name: securityWrapper
        in: query
        required: true
        schema: {}
      - name: userName
        in: query
        description: Filter users by username. By default is null
        required: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - Users
      summary: Add new user
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newUser:
                  $ref: '#/components/schemas/User'
                securityWrapper: {}
      responses:
        400:
          description: Provided user has no unique name
          content:
            '*/*':
              schema:
                type: object
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    Bet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        match:
          $ref: '#/components/schemas/Match'
        user:
          $ref: '#/components/schemas/User'
        userScore:
          $ref: '#/components/schemas/Score'
        result:
          type: integer
          format: int32
    Competition:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    FootBallTeam:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    FullTimeResult:
      type: object
      properties:
        id:
          type: integer
          format: int64
        homeTeam:
          type: integer
          format: int32
        awayTeam:
          type: integer
          format: int32
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int64
        competition:
          $ref: '#/components/schemas/Competition'
        utcDate:
          type: string
        status:
          type: string
        score:
          $ref: '#/components/schemas/Score'
        matchday:
          type: integer
          format: int32
        homeTeam:
          $ref: '#/components/schemas/FootBallTeam'
        awayTeam:
          $ref: '#/components/schemas/FootBallTeam'
    Score:
      type: object
      properties:
        id:
          type: integer
          format: int64
        winner:
          type: string
        fullTime:
          $ref: '#/components/schemas/FullTimeResult'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        password:
          type: string
        roleName:
          type: string
